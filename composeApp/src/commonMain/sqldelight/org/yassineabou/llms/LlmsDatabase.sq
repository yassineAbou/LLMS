    -- === ENTITY RELATIONSHIP DIAGRAM (ERD) ===
    -- Horizontal layout with relationships embedded in table structure
    --
    -- +----------------+     +---------------------+     +---------------------+     +----------------------+
    -- |     user       |     |       chats         |     |   chat_messages     |     |   generated_images   |
    -- +----------------+     +---------------------+     +---------------------+     +----------------------+
    -- | id (PK = 1)    |     | id (PK)             |◄────| chat_id (FK → chats.id) |   | id (PK)              |
    -- | google_sub_id  |     | title               |     | id (PK)             |     | prompt               |
    -- | email          |     | description         |     | message             |     | image_data (BLOB)    |
    -- | username       |     | text_model_name     |     | is_user             |     | image_model_name     |
    -- | profile_pic_url|     | is_bookmarked       |     | timestamp           |     | generated_at         |
    -- | created_at     |     | created_at          |     +---------------------+     +----------------------+
    -- +----------------+     +---------------------+
    --      ▲
    --      │ (Implicit: user owns all chats — single-user design)
    --      └───────────────────────────────────────────────────────┘
    --
    -- Notes:
    -- • chats → chat_messages: One-to-many via chat_id (ON DELETE CASCADE)
    -- • generated_images: Standalone (no FKs; future link to chats possible)
    -- • Index: idx_chat_messages_chat_id on chat_messages(chat_id)
    -- Index:
    -- - idx_chat_messages_chat_id (chat_id)

    -- === TABLE CREATION ===
    -- CHATS TABLE
    -- Stores chat sessions with metadata
    -- Uses TEXT PRIMARY KEY for UUID compatibility
    -- SQLDelight-compatible types: BOOLEAN → INTEGER, DATETIME → TEXT
    CREATE TABLE chats (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT,
        text_model_name TEXT NOT NULL,
        is_bookmarked INTEGER NOT NULL DEFAULT 0, -- 0 = false, 1 = true
        created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP -- ISO8601 format
    );

    -- CHAT_MESSAGES TABLE
    -- Stores individual messages in a chat
    -- Uses INTEGER PRIMARY KEY for fast auto-incrementing IDs
    -- SQLDelight-compatible types: BOOLEAN → INTEGER, DATETIME → TEXT
    CREATE TABLE chat_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id TEXT NOT NULL,
        message TEXT NOT NULL,
        is_user INTEGER NOT NULL, -- 0 = false (assistant), 1 = true (user)
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP, -- ISO8601 format
        FOREIGN KEY(chat_id) REFERENCES chats(id) ON DELETE CASCADE -- Enforces relationship with cascading delete
    );

    -- GENERATED_IMAGES TABLE
    -- Stores images generated by AI models
    -- Uses UUID for `id` (TEXT PRIMARY KEY)
    -- `image_data` stores raw byte array (BLOB) for binary efficiency
    -- Removed `WITHOUT ROWID` (not supported by SQLDelight)
    CREATE TABLE generated_images (
        id TEXT PRIMARY KEY,
        prompt TEXT NOT NULL,
        image_data BLOB NOT NULL,
        image_model_name TEXT NOT NULL,
        generated_at TEXT DEFAULT CURRENT_TIMESTAMP -- ISO8601 format
    );

    -- === USER TABLE ===
    -- Stores the information for the SINGLE logged-in user (local database)
    -- Only ONE user can exist at a time in this table
    -- When a user signs in, any existing user is replaced
    CREATE TABLE user (
        id INTEGER PRIMARY KEY DEFAULT 1 CHECK (id = 1), -- Ensures only one row ever exists
        google_sub_id TEXT NOT NULL,
        email TEXT NOT NULL,
        username TEXT NOT NULL,
        profile_pic_url TEXT,
        created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP -- ISO8601 format
    );

    -- === INDEXES ===
    -- Index for fast lookup of messages by chat_id
    -- Required for efficient loading of chat history
    CREATE INDEX idx_chat_messages_chat_id ON chat_messages(chat_id);

    -- === QUERIES FOR CHATS ===
        -- Get all chats, ordered by creation time (newest first)
        -- Returns all columns for UI display
        selectAllChats:
        SELECT id, title, description, text_model_name, is_bookmarked, created_at
        FROM chats ORDER BY created_at DESC;

    -- Insert a new chat
    -- Expects values: id, title, description, text_model_name, is_bookmarked, created_at
    insertChat:
    INSERT OR REPLACE INTO chats(id, title, description, text_model_name, is_bookmarked, created_at)
    VALUES (?, ?, ?, ?, ?, ?);

    -- Delete a specific chat by ID
    -- (Cascading delete handled in app logic)
    deleteChatById:
    DELETE FROM chats WHERE id = ?;

    -- Delete all chats
    -- (Cascading delete handled in app logic)
    clearAllChats:
    DELETE FROM chats;

    -- === QUERIES FOR CHAT MESSAGES ===
    -- Get messages for a specific chat, ordered by timestamp
    -- Used to load chat history
    selectMessagesByChatId:
    SELECT id, chat_id, message, is_user, timestamp
    FROM chat_messages WHERE chat_id = ? ORDER BY timestamp ASC;

    -- Insert a new message into a chat
    -- Expects values: chat_id, message, is_user, timestamp
    insertMessage:
    INSERT OR REPLACE INTO chat_messages(chat_id, message, is_user, timestamp)
    VALUES (?, ?, ?, ?);

     -- === QUERIES FOR GENERATED IMAGES ===
     -- Get all generated images, ordered by generation time
     -- Returns all columns for gallery view
     selectAllImages:
     SELECT id, prompt, image_data, image_model_name, generated_at
     FROM generated_images ORDER BY generated_at DESC;

     -- Insert a new generated image
     -- Expects values: id, prompt, image_data, image_model_name, generated_at
     insertImage:
     INSERT INTO generated_images(id, prompt, image_data, image_model_name, generated_at)
     VALUES (?, ?, ?, ?, ?);

     -- Delete a specific image by ID
     deleteImageById:
     DELETE FROM generated_images WHERE id = ?;

     -- Delete all generated images
     clearAllImages:
     DELETE FROM generated_images;

     -- === QUERIES FOR USER ===

    -- Get the current logged-in user
    -- Returns null if no user is logged in
    getUser:
    SELECT id, google_sub_id, email, username, profile_pic_url, created_at
    FROM user WHERE id = 1;

    -- Save user on sign-in
    -- INSERT OR REPLACE ensures only one user exists
    -- Always uses id = 1 to enforce single-user constraint
    insertOrUpdateUser:
    INSERT OR REPLACE INTO user(google_sub_id, email, username, profile_pic_url, created_at)
    VALUES (?, ?, ?, ?, ?);

    -- Delete user on sign-out or account removal
    -- Clears the single user row
    deleteUser:
    DELETE FROM user WHERE id = 1;