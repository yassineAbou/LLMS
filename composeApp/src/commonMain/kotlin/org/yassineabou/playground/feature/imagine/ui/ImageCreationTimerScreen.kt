package org.yassineabou.playground.feature.imagine.ui

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SnackbarDuration
import androidx.compose.material3.Text
import androidx.compose.material3.adaptive.currentWindowAdaptiveInfo
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.window.core.layout.WindowWidthSizeClass
import org.yassineabou.playground.app.core.navigation.Screen
import org.yassineabou.playground.app.core.sharedViews.SnackbarController
import org.yassineabou.playground.app.core.util.PaneOrScreenNavigator
import org.yassineabou.playground.feature.imagine.ui.supportingPane.SupportingPaneNavigator
import org.yassineabou.playground.feature.imagine.ui.supportingPane.SupportingPaneScreen
import org.yassineabou.playground.feature.imagine.ui.view.BackgroundIndicator

@Composable
fun ImageCreationTimerScreen(
    navController: NavController,
    imageGenViewModel: ImageGenViewModel,
    supportingPaneNavigator: SupportingPaneNavigator? = null,
    modifier: Modifier = Modifier
) {
    // Observe timer state from the ViewModel
    val timerState by imageGenViewModel.estimatedTimerState.collectAsStateWithLifecycle()
    val isImageGenerated by imageGenViewModel.isImageGenerated.collectAsStateWithLifecycle()
    //val isLargeScreen = rememberIsLargeScreen()
    val windowSize = currentWindowAdaptiveInfo().windowSizeClass
    val isLargeScreen by remember { mutableStateOf(windowSize.windowWidthSizeClass == WindowWidthSizeClass.EXPANDED) }
    val snackbarController = SnackbarController.current
    var screenWidth by remember { mutableStateOf(Dp.Unspecified) }
    // Get current navigation destination
    val currentDestination by navController.currentBackStackEntryAsState()
    val isCurrentDestination = remember(currentDestination) {
        currentDestination?.destination?.route == Screen.ImageCreationTimerScreen.route
    }

    // Trigger navigation when the timer completes
    LaunchedEffect(key1 = timerState.isTimerCompleted) {
        if (timerState.isTimerCompleted and isImageGenerated) {
            PaneOrScreenNavigator.navigateTo(
                supportingPaneNavigator = supportingPaneNavigator,
                navController = navController,
                isLargeScreen = isLargeScreen,
                paneDestination = SupportingPaneScreen.FullScreenImage,
                screenRoute = Screen.FullScreenImage.route
            )
            // Reset the timer state
            imageGenViewModel.resetEstimatedTimer()
        }
    }

    BoxWithConstraints(
        modifier = modifier.fillMaxSize(),
    ) {
        val currentWidth = maxWidth
        LaunchedEffect(currentWidth) {
            screenWidth = currentWidth
            if (screenWidth > 840.dp && isCurrentDestination) {
                imageGenViewModel.stopEstimatedTimer()
                navController.navigate(Screen.ImagineScreen.route)
            }
        }
        EstimatedTimer(
            timeText = "EST: ${timerState.remainingSeconds}s",
            progress = timerState.progress,
            modifier = Modifier
                .align(Alignment.Center)
                .padding(bottom = 200.dp)
                .size(325.dp)
        )

        Button(
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.error
            ),
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 113.dp),
            onClick = {
                // Stop the timer and reset the state
                imageGenViewModel.stopEstimatedTimer()

                PaneOrScreenNavigator.navigateBack(
                    supportingPaneNavigator = supportingPaneNavigator,
                    navController = navController,
                    isLargeScreen = isLargeScreen
                )
            }
        ) {
            Text(
                text = "Cancel",
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(horizontal = 16.dp, vertical = 4.dp),
            )
        }
    }
}

@Composable
private fun EstimatedTimer(
    modifier: Modifier = Modifier,
    timeText: String,
    progress: Float,
) {
    Box(modifier = modifier) {
        BackgroundIndicator(
            progress = progress,
            modifier = modifier
                .fillMaxSize()
                .scale(scaleX = 1f, scaleY = 1f),
            strokeWidth = 12.dp,
        )
        Text(
            modifier = Modifier.align(Alignment.Center),
            text = timeText,
            style = MaterialTheme.typography.displayLarge,
            fontWeight = FontWeight.Light,
        )
    }
}
